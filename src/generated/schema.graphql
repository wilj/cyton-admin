"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1 which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Migration`."""
  migrations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Migration`."""
    orderBy: [MigrationsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MigrationCondition
  ): MigrationsConnection

  """Reads and enables pagination through a set of `ProjectGroupMember`."""
  projectGroupMembers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProjectGroupMember`."""
    orderBy: [ProjectGroupMembersOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectGroupMemberCondition
  ): ProjectGroupMembersConnection

  """Reads and enables pagination through a set of `ProjectGroup`."""
  projectGroups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProjectGroup`."""
    orderBy: [ProjectGroupsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectGroupCondition
  ): ProjectGroupsConnection

  """Reads and enables pagination through a set of `Project`."""
  projects(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition
  ): ProjectsConnection

  """Reads and enables pagination through a set of `ProxyRoute`."""
  proxyRoutes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProxyRoute`."""
    orderBy: [ProxyRoutesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProxyRouteCondition
  ): ProxyRoutesConnection

  """Reads and enables pagination through a set of `UserId`."""
  userIds(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserId`."""
    orderBy: [UserIdsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserIdCondition
  ): UserIdsConnection

  """Reads and enables pagination through a set of `UserSession`."""
  userSessions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserSession`."""
    orderBy: [UserSessionsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserSessionCondition
  ): UserSessionsConnection
  proxyRoute(id: Int!): ProxyRoute
  proxyRouteByExternalHostName(externalHostName: String!): ProxyRoute

  """Reads a single `ProxyRoute` using its globally unique `ID`."""
  proxyRouteByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ProxyRoute`.
    """
    nodeId: ID!
  ): ProxyRoute
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Methods to use when ordering `Migration`."""
enum MigrationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_TS_ASC
  CREATED_TS_DESC
}

"""
A condition to be used against `Migration` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MigrationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `createdTs` field."""
  createdTs: Datetime
}

"""
A point in time as described by the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""A connection to a list of `Migration` values."""
type MigrationsConnection {
  """A list of `Migration` objects."""
  nodes: [Migration]!

  """
  A list of edges which contains the `Migration` and cursor to aid in pagination.
  """
  edges: [MigrationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Migration` you could get from the connection."""
  totalCount: Int!
}

type Migration {
  id: Int
  name: String
  createdTs: Datetime
}

"""A `Migration` edge in the connection."""
type MigrationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Migration` at the end of the edge."""
  node: Migration
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `ProjectGroupMember`."""
enum ProjectGroupMembersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PROJECT_GROUP_ID_ASC
  PROJECT_GROUP_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  ROLE_ASC
  ROLE_DESC
  CREATED_TS_ASC
  CREATED_TS_DESC
}

"""
A condition to be used against `ProjectGroupMember` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProjectGroupMemberCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `projectGroupId` field."""
  projectGroupId: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `role` field."""
  role: ProjectGroupMemberRole

  """Checks for equality with the object’s `createdTs` field."""
  createdTs: Datetime
}

enum ProjectGroupMemberRole {
  ADMIN
  DEVELOPER
}

"""A connection to a list of `ProjectGroupMember` values."""
type ProjectGroupMembersConnection {
  """A list of `ProjectGroupMember` objects."""
  nodes: [ProjectGroupMember]!

  """
  A list of edges which contains the `ProjectGroupMember` and cursor to aid in pagination.
  """
  edges: [ProjectGroupMembersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectGroupMember` you could get from the connection.
  """
  totalCount: Int!
}

type ProjectGroupMember {
  id: Int
  projectGroupId: Int
  userId: Int
  role: ProjectGroupMemberRole
  createdTs: Datetime

  """
  Reads a single `ProjectGroup` that is related to this `ProjectGroupMember`.
  """
  projectGroup: ProjectGroup
}

type ProjectGroup {
  id: Int
  name: String
  description: String
  baseDomain: String
  createdTs: Datetime

  """Reads and enables pagination through a set of `ProjectGroupMember`."""
  projectGroupMembers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProjectGroupMember`."""
    orderBy: [ProjectGroupMembersOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectGroupMemberCondition
  ): ProjectGroupMembersConnection!

  """Reads and enables pagination through a set of `Project`."""
  projects(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition
  ): ProjectsConnection!
}

"""Methods to use when ordering `Project`."""
enum ProjectsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PROJECT_GROUP_ID_ASC
  PROJECT_GROUP_ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  CREATED_TS_ASC
  CREATED_TS_DESC
}

"""
A condition to be used against `Project` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProjectCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `projectGroupId` field."""
  projectGroupId: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `createdTs` field."""
  createdTs: Datetime
}

"""A connection to a list of `Project` values."""
type ProjectsConnection {
  """A list of `Project` objects."""
  nodes: [Project]!

  """
  A list of edges which contains the `Project` and cursor to aid in pagination.
  """
  edges: [ProjectsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

type Project {
  id: Int
  projectGroupId: Int
  name: String
  description: String
  createdTs: Datetime

  """Reads a single `ProjectGroup` that is related to this `Project`."""
  projectGroup: ProjectGroup
}

"""A `Project` edge in the connection."""
type ProjectsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project
}

"""A `ProjectGroupMember` edge in the connection."""
type ProjectGroupMembersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectGroupMember` at the end of the edge."""
  node: ProjectGroupMember
}

"""Methods to use when ordering `ProjectGroup`."""
enum ProjectGroupsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  BASE_DOMAIN_ASC
  BASE_DOMAIN_DESC
  CREATED_TS_ASC
  CREATED_TS_DESC
}

"""
A condition to be used against `ProjectGroup` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProjectGroupCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `baseDomain` field."""
  baseDomain: String

  """Checks for equality with the object’s `createdTs` field."""
  createdTs: Datetime
}

"""A connection to a list of `ProjectGroup` values."""
type ProjectGroupsConnection {
  """A list of `ProjectGroup` objects."""
  nodes: [ProjectGroup]!

  """
  A list of edges which contains the `ProjectGroup` and cursor to aid in pagination.
  """
  edges: [ProjectGroupsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectGroup` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectGroup` edge in the connection."""
type ProjectGroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectGroup` at the end of the edge."""
  node: ProjectGroup
}

"""Methods to use when ordering `ProxyRoute`."""
enum ProxyRoutesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  EXTERNAL_HOST_NAME_ASC
  EXTERNAL_HOST_NAME_DESC
  INTERNAL_HOST_NAME_ASC
  INTERNAL_HOST_NAME_DESC
  INTERNAL_PORT_ASC
  INTERNAL_PORT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ProxyRoute` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProxyRouteCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `externalHostName` field."""
  externalHostName: String

  """Checks for equality with the object’s `internalHostName` field."""
  internalHostName: String

  """Checks for equality with the object’s `internalPort` field."""
  internalPort: Int
}

"""A connection to a list of `ProxyRoute` values."""
type ProxyRoutesConnection {
  """A list of `ProxyRoute` objects."""
  nodes: [ProxyRoute]!

  """
  A list of edges which contains the `ProxyRoute` and cursor to aid in pagination.
  """
  edges: [ProxyRoutesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProxyRoute` you could get from the connection."""
  totalCount: Int!
}

type ProxyRoute implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  externalHostName: String!
  internalHostName: String!
  internalPort: Int!
}

"""A `ProxyRoute` edge in the connection."""
type ProxyRoutesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProxyRoute` at the end of the edge."""
  node: ProxyRoute
}

"""Methods to use when ordering `UserId`."""
enum UserIdsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PREFERRED_USERNAME_ASC
  PREFERRED_USERNAME_DESC
}

"""
A condition to be used against `UserId` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserIdCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `preferredUsername` field."""
  preferredUsername: String
}

"""A connection to a list of `UserId` values."""
type UserIdsConnection {
  """A list of `UserId` objects."""
  nodes: [UserId]!

  """
  A list of edges which contains the `UserId` and cursor to aid in pagination.
  """
  edges: [UserIdsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserId` you could get from the connection."""
  totalCount: Int!
}

type UserId {
  id: Int
  preferredUsername: String
}

"""A `UserId` edge in the connection."""
type UserIdsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserId` at the end of the edge."""
  node: UserId
}

"""Methods to use when ordering `UserSession`."""
enum UserSessionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  EXTERNAL_ID_ASC
  EXTERNAL_ID_DESC
  JWT_ASC
  JWT_DESC
  ROLES_ASC
  ROLES_DESC
  PREFERRED_USERNAME_ASC
  PREFERRED_USERNAME_DESC
  GIVEN_NAME_ASC
  GIVEN_NAME_DESC
  FAMILY_NAME_ASC
  FAMILY_NAME_DESC
  EMAIL_ASC
  EMAIL_DESC
}

"""
A condition to be used against `UserSession` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserSessionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `externalId` field."""
  externalId: String

  """Checks for equality with the object’s `jwt` field."""
  jwt: JSON

  """Checks for equality with the object’s `roles` field."""
  roles: JSON

  """Checks for equality with the object’s `preferredUsername` field."""
  preferredUsername: String

  """Checks for equality with the object’s `givenName` field."""
  givenName: String

  """Checks for equality with the object’s `familyName` field."""
  familyName: String

  """Checks for equality with the object’s `email` field."""
  email: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""A connection to a list of `UserSession` values."""
type UserSessionsConnection {
  """A list of `UserSession` objects."""
  nodes: [UserSession]!

  """
  A list of edges which contains the `UserSession` and cursor to aid in pagination.
  """
  edges: [UserSessionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserSession` you could get from the connection."""
  totalCount: Int!
}

type UserSession {
  id: Int
  externalId: String
  jwt: JSON
  roles: JSON
  preferredUsername: String
  givenName: String
  familyName: String
  email: String
}

"""A `UserSession` edge in the connection."""
type UserSessionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserSession` at the end of the edge."""
  node: UserSession
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Migration`."""
  createMigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMigrationInput!
  ): CreateMigrationPayload

  """Creates a single `ProjectGroupMember`."""
  createProjectGroupMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectGroupMemberInput!
  ): CreateProjectGroupMemberPayload

  """Creates a single `ProjectGroup`."""
  createProjectGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectGroupInput!
  ): CreateProjectGroupPayload

  """Creates a single `Project`."""
  createProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectInput!
  ): CreateProjectPayload

  """Creates a single `ProxyRoute`."""
  createProxyRoute(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProxyRouteInput!
  ): CreateProxyRoutePayload

  """Creates a single `UserId`."""
  createUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserIdInput!
  ): CreateUserIdPayload

  """
  Updates a single `ProxyRoute` using its globally unique id and a patch.
  """
  updateProxyRouteByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProxyRouteByNodeIdInput!
  ): UpdateProxyRoutePayload

  """Updates a single `ProxyRoute` using a unique key and a patch."""
  updateProxyRoute(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProxyRouteInput!
  ): UpdateProxyRoutePayload

  """Updates a single `ProxyRoute` using a unique key and a patch."""
  updateProxyRouteByExternalHostName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProxyRouteByExternalHostNameInput!
  ): UpdateProxyRoutePayload

  """Deletes a single `ProxyRoute` using its globally unique id."""
  deleteProxyRouteByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProxyRouteByNodeIdInput!
  ): DeleteProxyRoutePayload

  """Deletes a single `ProxyRoute` using a unique key."""
  deleteProxyRoute(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProxyRouteInput!
  ): DeleteProxyRoutePayload

  """Deletes a single `ProxyRoute` using a unique key."""
  deleteProxyRouteByExternalHostName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProxyRouteByExternalHostNameInput!
  ): DeleteProxyRoutePayload
  currentUserHasRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CurrentUserHasRoleInput!
  ): CurrentUserHasRolePayload
  currentUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CurrentUserIdInput!
  ): CurrentUserIdPayload
  isCurrentUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: IsCurrentUserInput!
  ): IsCurrentUserPayload
  isLoggedIn(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: IsLoggedInInput!
  ): IsLoggedInPayload
  registerUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterUserInput!
  ): RegisterUserPayload
  reloadProxy: ReloadProxyPayload
  defineProjectGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DefineProjectGroupInput!
  ): DefineProjectGroupPayload
  initProjectGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InitProjectGroupInput!
  ): InitProjectGroupPayload
}

"""All input for the create `Migration` mutation."""
input CreateMigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Migration` to be created by this mutation."""
  migration: MigrationInput!
}

"""An input for mutations affecting `Migration`"""
input MigrationInput {
  id: Int
  name: String
  createdTs: Datetime
}

"""The output of our create `Migration` mutation."""
type CreateMigrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Migration` that was created by this mutation."""
  migration: Migration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Migration`. May be used by Relay 1."""
  migrationEdge(
    """The method to use when ordering `Migration`."""
    orderBy: [MigrationsOrderBy!] = [NATURAL]
  ): MigrationsEdge
}

"""All input for the create `ProjectGroupMember` mutation."""
input CreateProjectGroupMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProjectGroupMember` to be created by this mutation."""
  projectGroupMember: ProjectGroupMemberInput!
}

"""An input for mutations affecting `ProjectGroupMember`"""
input ProjectGroupMemberInput {
  id: Int
  projectGroupId: Int
  userId: Int
  role: ProjectGroupMemberRole
  createdTs: Datetime
}

"""The output of our create `ProjectGroupMember` mutation."""
type CreateProjectGroupMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectGroupMember` that was created by this mutation."""
  projectGroupMember: ProjectGroupMember

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ProjectGroup` that is related to this `ProjectGroupMember`.
  """
  projectGroup: ProjectGroup

  """An edge for our `ProjectGroupMember`. May be used by Relay 1."""
  projectGroupMemberEdge(
    """The method to use when ordering `ProjectGroupMember`."""
    orderBy: [ProjectGroupMembersOrderBy!] = [NATURAL]
  ): ProjectGroupMembersEdge
}

"""All input for the create `ProjectGroup` mutation."""
input CreateProjectGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProjectGroup` to be created by this mutation."""
  projectGroup: ProjectGroupInput!
}

"""An input for mutations affecting `ProjectGroup`"""
input ProjectGroupInput {
  id: Int
  name: String
  description: String
  baseDomain: String
  createdTs: Datetime
}

"""The output of our create `ProjectGroup` mutation."""
type CreateProjectGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectGroup` that was created by this mutation."""
  projectGroup: ProjectGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ProjectGroup`. May be used by Relay 1."""
  projectGroupEdge(
    """The method to use when ordering `ProjectGroup`."""
    orderBy: [ProjectGroupsOrderBy!] = [NATURAL]
  ): ProjectGroupsEdge
}

"""All input for the create `Project` mutation."""
input CreateProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Project` to be created by this mutation."""
  project: ProjectInput!
}

"""An input for mutations affecting `Project`"""
input ProjectInput {
  id: Int
  projectGroupId: Int
  name: String
  description: String
  createdTs: Datetime
}

"""The output of our create `Project` mutation."""
type CreateProjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Project` that was created by this mutation."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ProjectGroup` that is related to this `Project`."""
  projectGroup: ProjectGroup

  """An edge for our `Project`. May be used by Relay 1."""
  projectEdge(
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [NATURAL]
  ): ProjectsEdge
}

"""All input for the create `ProxyRoute` mutation."""
input CreateProxyRouteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProxyRoute` to be created by this mutation."""
  proxyRoute: ProxyRouteInput!
}

"""An input for mutations affecting `ProxyRoute`"""
input ProxyRouteInput {
  id: Int
  externalHostName: String!
  internalHostName: String!
  internalPort: Int!
}

"""The output of our create `ProxyRoute` mutation."""
type CreateProxyRoutePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProxyRoute` that was created by this mutation."""
  proxyRoute: ProxyRoute

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ProxyRoute`. May be used by Relay 1."""
  proxyRouteEdge(
    """The method to use when ordering `ProxyRoute`."""
    orderBy: [ProxyRoutesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProxyRoutesEdge
}

"""All input for the create `UserId` mutation."""
input CreateUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserId` to be created by this mutation."""
  userId: UserIdInput!
}

"""An input for mutations affecting `UserId`"""
input UserIdInput {
  id: Int
  preferredUsername: String
}

"""The output of our create `UserId` mutation."""
type CreateUserIdPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserId` that was created by this mutation."""
  userId: UserId

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserId`. May be used by Relay 1."""
  userIdEdge(
    """The method to use when ordering `UserId`."""
    orderBy: [UserIdsOrderBy!] = [NATURAL]
  ): UserIdsEdge
}

"""All input for the `updateProxyRouteByNodeId` mutation."""
input UpdateProxyRouteByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProxyRoute` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProxyRoute` being updated.
  """
  patch: ProxyRoutePatch!
}

"""
Represents an update to a `ProxyRoute`. Fields that are set will be updated.
"""
input ProxyRoutePatch {
  id: Int
  externalHostName: String
  internalHostName: String
  internalPort: Int
}

"""The output of our update `ProxyRoute` mutation."""
type UpdateProxyRoutePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProxyRoute` that was updated by this mutation."""
  proxyRoute: ProxyRoute

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ProxyRoute`. May be used by Relay 1."""
  proxyRouteEdge(
    """The method to use when ordering `ProxyRoute`."""
    orderBy: [ProxyRoutesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProxyRoutesEdge
}

"""All input for the `updateProxyRoute` mutation."""
input UpdateProxyRouteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProxyRoute` being updated.
  """
  patch: ProxyRoutePatch!
  id: Int!
}

"""All input for the `updateProxyRouteByExternalHostName` mutation."""
input UpdateProxyRouteByExternalHostNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProxyRoute` being updated.
  """
  patch: ProxyRoutePatch!
  externalHostName: String!
}

"""All input for the `deleteProxyRouteByNodeId` mutation."""
input DeleteProxyRouteByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProxyRoute` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ProxyRoute` mutation."""
type DeleteProxyRoutePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProxyRoute` that was deleted by this mutation."""
  proxyRoute: ProxyRoute
  deletedProxyRouteNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ProxyRoute`. May be used by Relay 1."""
  proxyRouteEdge(
    """The method to use when ordering `ProxyRoute`."""
    orderBy: [ProxyRoutesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProxyRoutesEdge
}

"""All input for the `deleteProxyRoute` mutation."""
input DeleteProxyRouteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteProxyRouteByExternalHostName` mutation."""
input DeleteProxyRouteByExternalHostNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  externalHostName: String!
}

"""All input for the `currentUserHasRole` mutation."""
input CurrentUserHasRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  role: String
}

"""The output of our `currentUserHasRole` mutation."""
type CurrentUserHasRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `currentUserId` mutation."""
input CurrentUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `currentUserId` mutation."""
type CurrentUserIdPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  integer: Int

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `isCurrentUser` mutation."""
input IsCurrentUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int
}

"""The output of our `isCurrentUser` mutation."""
type IsCurrentUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `isLoggedIn` mutation."""
input IsLoggedInInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `isLoggedIn` mutation."""
type IsLoggedInPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `registerUser` mutation."""
input RegisterUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `registerUser` mutation."""
type RegisterUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  userSessions: [UserSession]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type ReloadProxyPayload {
  reloaded: Boolean
  query: Query
}

input DefineProjectGroupInput {
  name: String!
  baseDomain: String!
  description: String
}

type DefineProjectGroupPayload {
  projectGroupId: Int!
  query: Query
}

input InitProjectGroupInput {
  projectGroupId: Int!
  adminAccountName: String!
  adminInitialPassword: String!
}

type InitProjectGroupPayload {
  status: String!
  query: Query
}

"""
The root subscription type: contains events and live queries you can subscribe to with the `subscription` operation.

#### Live Queries

Live query fields are differentiated by containing `(live)` at the end of their description, they are added for each field in the `Query` type. When you subscribe to a live query field, the selection set will be evaluated and sent to the client, and then most things\* that would cause the output of the selection set to change will trigger the selection set to be re-evaluated and the results to be re-sent to the client.

_(\* Not everything: typically only changes to persisted data referenced by the query are detected, not computed fields.)_

Live queries can be very expensive, so try and keep them small and focussed.

#### Events

Event fields will run their selection set when, and only when, the specified server-side event occurs. This makes them a lot more efficient than Live Queries, but it is still recommended that you keep payloads fairly small.
"""
type Subscription {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1 which can only query top level fields if they are in a particular form. (live)
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`. (live)
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`. (live)"""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Migration`. (live)"""
  migrations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Migration`."""
    orderBy: [MigrationsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MigrationCondition
  ): MigrationsConnection

  """
  Reads and enables pagination through a set of `ProjectGroupMember`. (live)
  """
  projectGroupMembers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProjectGroupMember`."""
    orderBy: [ProjectGroupMembersOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectGroupMemberCondition
  ): ProjectGroupMembersConnection

  """Reads and enables pagination through a set of `ProjectGroup`. (live)"""
  projectGroups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProjectGroup`."""
    orderBy: [ProjectGroupsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectGroupCondition
  ): ProjectGroupsConnection

  """Reads and enables pagination through a set of `Project`. (live)"""
  projects(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition
  ): ProjectsConnection

  """Reads and enables pagination through a set of `ProxyRoute`. (live)"""
  proxyRoutes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProxyRoute`."""
    orderBy: [ProxyRoutesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProxyRouteCondition
  ): ProxyRoutesConnection

  """Reads and enables pagination through a set of `UserId`. (live)"""
  userIds(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserId`."""
    orderBy: [UserIdsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserIdCondition
  ): UserIdsConnection

  """Reads and enables pagination through a set of `UserSession`. (live)"""
  userSessions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserSession`."""
    orderBy: [UserSessionsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserSessionCondition
  ): UserSessionsConnection

  """ (live)"""
  proxyRoute(id: Int!): ProxyRoute

  """ (live)"""
  proxyRouteByExternalHostName(externalHostName: String!): ProxyRoute

  """Reads a single `ProxyRoute` using its globally unique `ID`. (live)"""
  proxyRouteByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ProxyRoute`.
    """
    nodeId: ID!
  ): ProxyRoute
  listen(topic: String!): ListenPayload!
}

type ListenPayload {
  """
  Our root query field type. Allows us to run any query from our subscription payload.
  """
  query: Query
  relatedNode: Node
  relatedNodeId: ID
}

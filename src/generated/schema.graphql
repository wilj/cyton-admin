"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1 which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Migration`."""
  migrations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Migration`."""
    orderBy: [MigrationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MigrationCondition
  ): MigrationsConnection

  """Reads and enables pagination through a set of `UserSession`."""
  userSessions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserSession`."""
    orderBy: [UserSessionsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserSessionCondition
  ): UserSessionsConnection
  migration(id: Int!): Migration
  migrationByName(name: String!): Migration

  """Reads a single `Migration` using its globally unique `ID`."""
  migrationByNodeId(
    """The globally unique `ID` to be used in selecting a single `Migration`."""
    nodeId: ID!
  ): Migration
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Methods to use when ordering `Migration`."""
enum MigrationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_TS_ASC
  CREATED_TS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Migration` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MigrationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `createdTs` field."""
  createdTs: Datetime
}

"""
A point in time as described by the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""A connection to a list of `Migration` values."""
type MigrationsConnection {
  """A list of `Migration` objects."""
  nodes: [Migration]!

  """
  A list of edges which contains the `Migration` and cursor to aid in pagination.
  """
  edges: [MigrationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Migration` you could get from the connection."""
  totalCount: Int!
}

type Migration implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String
  createdTs: Datetime
}

"""A `Migration` edge in the connection."""
type MigrationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Migration` at the end of the edge."""
  node: Migration
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `UserSession`."""
enum UserSessionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  EXTERNAL_ID_ASC
  EXTERNAL_ID_DESC
  JWT_ASC
  JWT_DESC
  ROLES_ASC
  ROLES_DESC
  PREFERRED_USERNAME_ASC
  PREFERRED_USERNAME_DESC
  GIVEN_NAME_ASC
  GIVEN_NAME_DESC
  FAMILY_NAME_ASC
  FAMILY_NAME_DESC
  EMAIL_ASC
  EMAIL_DESC
}

"""
A condition to be used against `UserSession` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserSessionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `externalId` field."""
  externalId: String

  """Checks for equality with the object’s `jwt` field."""
  jwt: JSON

  """Checks for equality with the object’s `roles` field."""
  roles: JSON

  """Checks for equality with the object’s `preferredUsername` field."""
  preferredUsername: String

  """Checks for equality with the object’s `givenName` field."""
  givenName: String

  """Checks for equality with the object’s `familyName` field."""
  familyName: String

  """Checks for equality with the object’s `email` field."""
  email: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""A connection to a list of `UserSession` values."""
type UserSessionsConnection {
  """A list of `UserSession` objects."""
  nodes: [UserSession]!

  """
  A list of edges which contains the `UserSession` and cursor to aid in pagination.
  """
  edges: [UserSessionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserSession` you could get from the connection."""
  totalCount: Int!
}

type UserSession {
  id: Int
  externalId: String
  jwt: JSON
  roles: JSON
  preferredUsername: String
  givenName: String
  familyName: String
  email: String
}

"""A `UserSession` edge in the connection."""
type UserSessionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserSession` at the end of the edge."""
  node: UserSession
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Migration`."""
  createMigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMigrationInput!
  ): CreateMigrationPayload

  """Updates a single `Migration` using its globally unique id and a patch."""
  updateMigrationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMigrationByNodeIdInput!
  ): UpdateMigrationPayload

  """Updates a single `Migration` using a unique key and a patch."""
  updateMigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMigrationInput!
  ): UpdateMigrationPayload

  """Updates a single `Migration` using a unique key and a patch."""
  updateMigrationByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMigrationByNameInput!
  ): UpdateMigrationPayload

  """Deletes a single `Migration` using its globally unique id."""
  deleteMigrationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMigrationByNodeIdInput!
  ): DeleteMigrationPayload

  """Deletes a single `Migration` using a unique key."""
  deleteMigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMigrationInput!
  ): DeleteMigrationPayload

  """Deletes a single `Migration` using a unique key."""
  deleteMigrationByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMigrationByNameInput!
  ): DeleteMigrationPayload
  currentUserHasRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CurrentUserHasRoleInput!
  ): CurrentUserHasRolePayload
  currentUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CurrentUserIdInput!
  ): CurrentUserIdPayload
  isAdmin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: IsAdminInput!
  ): IsAdminPayload
  isCurrentUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: IsCurrentUserInput!
  ): IsCurrentUserPayload
  isLoggedIn(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: IsLoggedInInput!
  ): IsLoggedInPayload
  registerUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterUserInput!
  ): RegisterUserPayload
}

"""All input for the create `Migration` mutation."""
input CreateMigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Migration` to be created by this mutation."""
  migration: MigrationInput!
}

"""An input for mutations affecting `Migration`"""
input MigrationInput {
  id: Int
  name: String
  createdTs: Datetime
}

"""The output of our create `Migration` mutation."""
type CreateMigrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Migration` that was created by this mutation."""
  migration: Migration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Migration`. May be used by Relay 1."""
  migrationEdge(
    """The method to use when ordering `Migration`."""
    orderBy: [MigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MigrationsEdge
}

"""All input for the `updateMigrationByNodeId` mutation."""
input UpdateMigrationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Migration` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Migration` being updated.
  """
  patch: MigrationPatch!
}

"""
Represents an update to a `Migration`. Fields that are set will be updated.
"""
input MigrationPatch {
  id: Int
  name: String
  createdTs: Datetime
}

"""The output of our update `Migration` mutation."""
type UpdateMigrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Migration` that was updated by this mutation."""
  migration: Migration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Migration`. May be used by Relay 1."""
  migrationEdge(
    """The method to use when ordering `Migration`."""
    orderBy: [MigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MigrationsEdge
}

"""All input for the `updateMigration` mutation."""
input UpdateMigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Migration` being updated.
  """
  patch: MigrationPatch!
  id: Int!
}

"""All input for the `updateMigrationByName` mutation."""
input UpdateMigrationByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Migration` being updated.
  """
  patch: MigrationPatch!
  name: String!
}

"""All input for the `deleteMigrationByNodeId` mutation."""
input DeleteMigrationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Migration` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Migration` mutation."""
type DeleteMigrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Migration` that was deleted by this mutation."""
  migration: Migration
  deletedMigrationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Migration`. May be used by Relay 1."""
  migrationEdge(
    """The method to use when ordering `Migration`."""
    orderBy: [MigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MigrationsEdge
}

"""All input for the `deleteMigration` mutation."""
input DeleteMigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteMigrationByName` mutation."""
input DeleteMigrationByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""All input for the `currentUserHasRole` mutation."""
input CurrentUserHasRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  role: String
}

"""The output of our `currentUserHasRole` mutation."""
type CurrentUserHasRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `currentUserId` mutation."""
input CurrentUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `currentUserId` mutation."""
type CurrentUserIdPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  integer: Int

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `isAdmin` mutation."""
input IsAdminInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `isAdmin` mutation."""
type IsAdminPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `isCurrentUser` mutation."""
input IsCurrentUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int
}

"""The output of our `isCurrentUser` mutation."""
type IsCurrentUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `isLoggedIn` mutation."""
input IsLoggedInInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `isLoggedIn` mutation."""
type IsLoggedInPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `registerUser` mutation."""
input RegisterUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `registerUser` mutation."""
type RegisterUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  userSessions: [UserSession]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The root subscription type: contains events and live queries you can subscribe to with the `subscription` operation.

#### Live Queries

Live query fields are differentiated by containing `(live)` at the end of their description, they are added for each field in the `Query` type. When you subscribe to a live query field, the selection set will be evaluated and sent to the client, and then most things\* that would cause the output of the selection set to change will trigger the selection set to be re-evaluated and the results to be re-sent to the client.

_(\* Not everything: typically only changes to persisted data referenced by the query are detected, not computed fields.)_

Live queries can be very expensive, so try and keep them small and focussed.

#### Events

Event fields will run their selection set when, and only when, the specified server-side event occurs. This makes them a lot more efficient than Live Queries, but it is still recommended that you keep payloads fairly small.
"""
type Subscription {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1 which can only query top level fields if they are in a particular form. (live)
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`. (live)
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`. (live)"""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Migration`. (live)"""
  migrations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Migration`."""
    orderBy: [MigrationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MigrationCondition
  ): MigrationsConnection

  """Reads and enables pagination through a set of `UserSession`. (live)"""
  userSessions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserSession`."""
    orderBy: [UserSessionsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserSessionCondition
  ): UserSessionsConnection

  """ (live)"""
  migration(id: Int!): Migration

  """ (live)"""
  migrationByName(name: String!): Migration

  """Reads a single `Migration` using its globally unique `ID`. (live)"""
  migrationByNodeId(
    """The globally unique `ID` to be used in selecting a single `Migration`."""
    nodeId: ID!
  ): Migration
  listen(topic: String!): ListenPayload!
}

type ListenPayload {
  """
  Our root query field type. Allows us to run any query from our subscription payload.
  """
  query: Query
  relatedNode: Node
  relatedNodeId: ID
}
